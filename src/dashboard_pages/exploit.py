import sys
print(sys.path)
sys.path.append("..")
sys.path.append("../src")
import matplotlib.pyplot as plt
import pandas as pd
import streamlit as st
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import scipy
from sklearn.model_selection import train_test_split
from keras.models import Sequential, load_model
from keras.layers import LSTM, Dense, Flatten, Dropout
warnings.filterwarnings('ignore')
import keras
import np_utils
import math
import time
import numpy as np
import csv

from collections import OrderedDict,Counter
def group_list(lst):
      
    return list(zip(Counter(lst).keys(), Counter(lst).values()))



columns = ['user','activity','timestamp', 'x-axis', 'y-axis', 'z-axis']
df_har = pd.read_csv('./src/WISDM_ar_v1.1/WISDM_ar_v1.1_raw.txt', header = None, names = columns)
df_har = df_har.dropna()
df_har.shape
df_har['z-axis'] = df_har['z-axis'].str.replace(';', '')
df_har['z-axis'] = df_har['z-axis'].apply(lambda x:float(x))
df = df_har[df_har['timestamp'] != 0]
df = df.sort_values(by = ['user', 'timestamp'], ignore_index=True)



model = load_model('src/model_fld/model.h5')
labels = ["Downstairs",  "Jogging",  "Sitting",  "Standing",  "Upstairs",  "Walking"]
def app():
    st.set_option('deprecation.showPyplotGlobalUse', False)
    st.title('Test your data!')
    choice = st.selectbox("¿Qué actidad es realmente?",labels)
    uploaded_file = st.file_uploader("Sube tu csv", type={"csv", "txt"})
    if uploaded_file is not None:
        df_har = pd.read_csv(uploaded_file, sep=";", error_bad_lines = False, header = [1])
        input_labels = ["ACCELEROMETER X (m/s²)", "ACCELEROMETER Y (m/s²)", "ACCELEROMETER Z (m/s²)"]
        #input_labels = ["YYYY-MO-DD HH-MI-SS_SSS", "LINEAR ACCELERATION X (m/s²)","LINEAR ACCELERATION Y (m/s²)","LINEAR ACCELERATION Z (m/s²)"]
        five_percent = round(df_har.shape[0]*0.05)
        final = df_har.shape[0] - five_percent
        df_har = df_har[input_labels][five_percent:final]
        
        n_time_steps = 50
        n_features = 3 
        tot = df_har.shape[0]
        end = tot
        base = math.floor(tot / n_time_steps / n_features)
        start = base * n_time_steps * n_features
        df_har.drop(df_har.index[start:end],0,inplace=True)
        step = 10 
        segments = []

        for i in range(0,  df_har.shape[0]- n_time_steps, step):  

            xs = df_har[input_labels[0]].values[i: i + n_time_steps]

            ys = df_har[input_labels[1]].values[i: i + n_time_steps]

            zs = df_har[input_labels[2]].values[i: i + n_time_steps]

            segments.append([xs, ys, zs])

        #reshape the segments which is (list of arrays) to a list
        reshaped_segments = np.asarray(segments, dtype= np.float32).reshape(-1, n_time_steps, n_features)
        arr = np.asarray(df_har, dtype= np.float32).reshape(-1, n_time_steps, n_features)
        
        predict_x = model.predict(arr) 
        classes_x=np.argmax(predict_x, axis=1)
        classes_dict = dict(group_list(list(classes_x)))

        dct = dict(group_list(list(classes_x)))

        new_dict = {}

        for e in dct:
            new_dict[labels[e]] = dct[e]
    
        df_class = pd.DataFrame.from_records([new_dict]).T
        df_class.columns = ["Qty"]
        st.write(df_class)

        pred = max(new_dict, key=new_dict.get)
        df_max = df_har.shape[0]
        columns_select = st.beta_columns(3)
        with columns_select[0]:
            data36 = df[(df["user"] == 36) & (df["activity"] == choice)][five_percent:final]
            sns.lineplot(y = "x-axis", x = "timestamp", data = data36)
            sns.lineplot(y = "y-axis", x = "timestamp", data = data36)
            sns.lineplot(y = "z-axis", x = "timestamp", data = data36)
            plt.legend(["x-axis", "y-axis", "z-axis"])
            plt.ylabel(choice)
            plt.title("Expected: "+choice, fontsize = 15)
            st.pyplot()
        with columns_select[1]:
            plt.plot(df_har.index, df_har[input_labels[0]])
            plt.plot(df_har.index, df_har[input_labels[1]])
            plt.plot(df_har.index, df_har[input_labels[2]])
            plt.legend(["x-axis", "y-axis", "z-axis"])
            plt.legend(["LINEAR ACCELERATION X (m/s²)","LINEAR ACCELERATION Y (m/s²)","LINEAR ACCELERATION Z (m/s²)"])
            plt.ylabel("Prediction")
            plt.title("Prediction: "+pred, fontsize = 15)
            st.pyplot()
        with columns_select[2]:
            data36 = df[(df["user"] == 36) & (df["activity"] == pred)][five_percent:final]
            sns.lineplot(y = "x-axis", x = range(data36.shape[0]), data = data36)
            sns.lineplot(y = "y-axis", x = range(data36.shape[0]), data = data36)
            sns.lineplot(y = "z-axis", x = range(data36.shape[0]), data = data36)
            plt.legend(["x-axis", "y-axis", "z-axis"])
            plt.ylabel("Real: "+pred)
            plt.title(pred, fontsize = 15)
            st.pyplot()